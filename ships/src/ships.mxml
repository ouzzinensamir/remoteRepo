<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   initialize="initializeHandler(event)" xmlns:component="component.*">
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import component.AbstractComponent;
			
			import mx.containers.TitleWindow;
			import mx.controls.TextInput;
			import mx.core.DragSource;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			
			import popups.GenericPopup;
			import popups.LinePopup;
			import popups.RailPopup;
			import popups.RectPopup;
			
			
			[Bindable]
			private var echelle:String;
			private var buttonClicked:Boolean;
			private var selectedImage:Image;
			public var myPopUp:TitleWindow;
			public var xfieldInput:TextInput;
			public var yfieldInput:TextInput;
			
			private function initializeHandler(event:FlexEvent):void
			{
				echelle = "Echelle : 1cm <-> 200m";
			}
			
			private function mouveComponent(event:MouseEvent):void
			{
				selectedImage = event.currentTarget as Image;
				selectedImage.alpha = 0.6;
				var ds:DragSource = new DragSource();
				ds.addData(selectedImage.id, 'idComponent');
				// Call the DragManager doDrag() method to start the drag.
				DragManager.doDrag(selectedImage, ds, event);
			}
			
			// Called when the user moves the drag indicator onto the drop target.
			private function dragEnterHandler(event:DragEvent):void {
				// Accept the drag only if the user is dragging data 
				// identified by the 'color' format value.
				if (event.dragSource.hasFormat('idComponent')) {
					// Get the drop target component from the event object.
					var dropTarget:HBox=HBox(event.currentTarget);
					// Accept the drop.
					DragManager.acceptDragDrop(dropTarget);
				}
			}
					
			// Called if the target accepts the dragged object and the user 
			// releases the mouse button while over the Canvas container. 
			private function dragDropHandler(event:DragEvent):void {
				if (event.dragSource.hasFormat('idComponent')) {
					var data:String = event.dragSource.dataForFormat('idComponent') as String;
					if(data=="grid")
					{
						displayGrid();
					}
					if(data=="pain")
					{
						deleteGrid();
					}
					if(data=="rail")
					{
						callDrawer(event);
					}
					if(data=="rect")
					{
						callDrawer(event);
					}
					if(data=="line")
					{
						callDrawer(event);
					}
				}
			}    
			
			private function callDrawer(event:DragEvent):void
			{
				var coordinates:GenericPopup;
				var data:String = event.dragSource.dataForFormat('idComponent') as String;
				var definedX:int=event.currentTarget.mouseX;
				var definedY:int=event.currentTarget.mouseY;
				if(data=="rail")
					coordinates =  new RailPopup(definedX,definedY);
				if(data=="rect")
					coordinates =  new RectPopup(definedX,definedY);
				if(data=="line")
					coordinates =  new LinePopup(definedX,definedY);
				coordinates.terminal=terminal;
				PopUpManager.addPopUp(coordinates,this,true);
				PopUpManager.centerPopUp(coordinates);
			}
			
			private function displayGrid():void
			{
				grid_terminal.visible = true;
			}
			private function deleteGrid():void
			{
				grid_terminal.visible = false;
				terminal.graphics.clear();
				terminal.removeAllElements();
			}
			
			protected function terminal_mouseDownHandler(event:MouseEvent):void
			{
				var tedst:AbstractComponent=event.target as AbstractComponent ;
				tedst.startDrag();
			}
			
			protected function terminal_mouseUpHandler(event:MouseEvent):void
			{
				var tedst:AbstractComponent=event.target as AbstractComponent ;
				tedst.stopDrag();
			}
			
		]]>
	</fx:Script>
		<!--Container -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<mx:VBox width="650" height="500" borderColor="#C0C0C0" borderStyle="solid"
					 horizontalAlign="center" verticalAlign="middle">
				<!--Tools Bar -->
				<mx:VBox width="100%" height="18%" backgroundColor="#F2F2F2" borderColor="#C0C0C0"
						 borderStyle="solid">
					<!-- First Part-->
					<mx:HBox width="100%" height="50%"
							 verticalAlign="middle" horizontalGap="3" horizontalAlign="right" paddingRight="10" >
						<s:Image id="pain" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/pain.png')" toolTip="Suppression"/>
						<mx:VRule height="100%"/>
						<s:Image id="grid" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/grid.jpg')" toolTip="Grid"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/back_left.png')"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/back_reight.png')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/mouse.png')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/copie.png')"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/remove.png')"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/refrech.png')"/>
						<mx:VRule height="100%"/>
						<s:Image id="stop" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/stop.png')" toolTip="Stop"/>
						<s:Image id="line" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/ligne.png')" toolTip="Ligne"/>
						<s:Image id="parcking" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/parcking.png')" toolTip="Parcking"/>
						<s:Image id="point" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/point.png')" toolTip="Point"/>
						<s:Image id="triangle" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/triangle.png')" toolTip="Triangle"/>
						<s:Image id="rect" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/ractangle_mere.png')" toolTip="Rectangle"/>
						<s:Image id="rectangle_vert" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/rectangle_vert.png')" toolTip="Rectangle"/>
						<s:Image id="tringle_bizzar" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/triangle_bizzar.png')" toolTip="Triangle"/>
						<mx:VRule height="100%"/>
						<s:Image id="rail" mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/rail.png')" toolTip="Rail"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/zenzibar.png')"/>
					</mx:HBox>
					<mx:HRule width="100%"/>
					<!-- Second Part-->
					<mx:HBox width="100%" height="50%" paddingRight="10" paddingLeft="10" verticalAlign="middle" horizontalAlign="right" horizontalGap="3">
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/zoomInOut.png')"/>
						<mx:VRule height="100%"/>
						<s:Label fontSize="12" fontWeight="bold" text="Accés direct :"/>
						<s:DropDownList width="20%" selectedIndex="0"> 
							<mx:ArrayCollection>
								<fx:String>Zone</fx:String>
								<fx:String>Navires</fx:String>
								<fx:String>Camions</fx:String>
								<fx:String>Train</fx:String>
								<fx:String>Avion</fx:String>
							</mx:ArrayCollection>
						</s:DropDownList>
						<s:DropDownList width="20%" selectedIndex="0"> 
							<mx:ArrayCollection>
								<fx:String>Travée</fx:String>
								<fx:String>Navires</fx:String>
								<fx:String>Camions</fx:String>
								<fx:String>Train</fx:String>
								<fx:String>Avion</fx:String>
							</mx:ArrayCollection>
						</s:DropDownList>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/okButton.jpg')" toolTip="OK"/>
						<mx:VRule height="100%"/>
						<mx:HBox width="20%">
							
						</mx:HBox>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/hand.jpg')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/lock.jpg')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/binoculars.jpg')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/zoom_left.png')"/>
						<s:Image mouseDown="mouveComponent(event)" 
								 source="@Embed(source = '/images/zoom_reghit.png')"/>
					</mx:HBox>
				</mx:VBox>
				<!--Terminal -->
				<mx:HBox width="85%" height="72%" backgroundColor="#F2F2F2" borderColor="#000000"
						 borderStyle="solid" dragEnter="dragEnterHandler(event)" dragDrop="dragDropHandler(event)">
					<mx:Canvas>
						<s:Image id="grid_terminal" visible="false" width="100%" height="100%"
								 source="@Embed(source = '/images/terminal.jpg')"/>
						<component:Terminal id="terminal" mouseUp="terminal_mouseUpHandler(event)" mouseDown="terminal_mouseDownHandler(event)" dragEnter="dragEnterHandler(event)" dragDrop="dragDropHandler(event)" />
					</mx:Canvas>
					
				</mx:HBox>
				<!-- stat bar -->
				<mx:HBox width="100%" height="10%" backgroundColor="#7F7F7F">
					<mx:HBox width="80%" height="100%" verticalAlign="middle">
						<s:Label color="#FFFFFF" fontSize="12" fontWeight="bold" paddingLeft="9"
								 text="{echelle}"/>
					</mx:HBox>
					<mx:HBox width="20%" height="100%" horizontalAlign="right" verticalAlign="middle">
						<s:Label color="#FFFFFF" fontSize="12" fontWeight="bold" paddingRight="9"
								 text="Coordonnées : (300,400)"/>
					</mx:HBox>
				</mx:HBox>
			</mx:VBox>
		</s:HGroup>

</s:WindowedApplication>
