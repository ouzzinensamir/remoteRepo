<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009"
					   xmlns:s="library://ns.adobe.com/flex/spark"
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   xmlns:component="component.*"
					   xmlns:local="*"
					   xmlns:panzoom="org.rockholla.controls.panzoom.*"
					   creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import component.AbstractComponent;
			
			import mx.containers.TitleWindow;
			import mx.controls.Alert;
			import mx.controls.TextInput;
			import mx.core.DragSource;
			import mx.core.UIComponent;
			import mx.events.DragEvent;
			import mx.events.FlexEvent;
			import mx.managers.DragManager;
			import mx.managers.PopUpManager;
			
			import org.granite.validation.constraints.Null;
			
			import popups.GenericPopup;
			import popups.LinePopup;
			import popups.PointPopup;
			import popups.RailPopup;
			import popups.RectPopup;
			import popups.TrapezoidalPopup;
			
			public static const MAX_ZOOM:Number = 20;
			public static const MIN_ZOOM:Number = 1;
			
			[Bindable]
			private var echelle:String;
			private var buttonClicked:Boolean;
			private var selectedImage:Image;
			public var xfieldInput:TextInput;
			public var yfieldInput:TextInput;
			[Bindable]
			private var fixedZoomPoint:Point=null;
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				echelle = "Echelle : 1cm <-> 200m";
				panzoom.addEventListener(DragEvent.DRAG_ENTER,dragEnterHandler);
				panzoom.addEventListener(DragEvent.DRAG_DROP,dragDropHandler);
			}
			
			private function selectComponent(event:MouseEvent):void
			{
				selectedImage = event.currentTarget as Image;
				selectedImage.alpha = 0.6;
				var ds:DragSource = new DragSource();
				ds.addData(selectedImage.id, 'idComponent');
				// Call the DragManager doDrag() method to start the drag.
				DragManager.doDrag(selectedImage, ds, event);
			}
			
			// Called when the user moves the drag indicator onto the drop target.
			public function dragEnterHandler(event:DragEvent):void {
				if (event.dragSource.hasFormat('idComponent')) {
					// Accept the drop.
					DragManager.acceptDragDrop(event.target as UIComponent);
				}
			}
					
			// Called if the target accepts the dragged object and the user 
			// releases the mouse button while over the Canvas container. 
			public function dragDropHandler(event:DragEvent):void {
				if (event.dragSource.hasFormat('idComponent')  ) {
					var data:String = event.dragSource.dataForFormat('idComponent') as String;
					switch(data){
						case "grid" :
							displayGrid();
						default :
							openPopup(event);
					}
				}
				
			}    
			
			private function openPopup(event:DragEvent):void
			{
				var idComponent:String = event.dragSource.dataForFormat('idComponent') as String;
				var coordinates:GenericPopup=createPopup(idComponent,event);
				coordinates.terminal=terminal;
				PopUpManager.addPopUp(coordinates,this,true);
				PopUpManager.centerPopUp(coordinates);
			}
			
			private function createPopup( idComponent:String,event:DragEvent):GenericPopup{
				var definedX:int=event.currentTarget.mouseX;
				var definedY:int=event.currentTarget.mouseY;
				switch(idComponent){
					case "rail":
						return new RailPopup(definedX,definedY);
					case "rect" :
						return new RectPopup(definedX,definedY,0x3366FF);
					case "rectangle_vert" :
						return new RectPopup(definedX,definedY,0x4BC439);
					case "line" :
						return new LinePopup(definedX,definedY);
					case "point" :
						return new PointPopup(definedX,definedY);
					case "trapezoidal" :
						return new TrapezoidalPopup(definedX,definedY);
					default :
						return new GenericPopup();
				}
			}
			
			private function displayGrid():void
			{
			}
			private function cleanTerminal(event:MouseEvent):void
			{
				terminal.graphics.clear();
				terminal.removeAllChildren();
			}
			
			protected function terminal_mouseDownHandler(event:MouseEvent):void
			{
				var selectedX:int=event.currentTarget.mouseX;
				var selectedY:int=event.currentTarget.mouseY;
				fixedZoomPoint=new Point(selectedX,selectedY);
			}
			
			protected function terminal_mouseUpHandler(event:MouseEvent):void
			{
				var tedst:AbstractComponent=event.target as AbstractComponent ;
				//tedst.stopDrag();
			}
			
			private function zommComponent():void{
				panzoom.fixedZoomPoint=fixedZoomPoint;
				var newScale:Number=panzoom.scale+1.5;
				panzoom.scale=newScale>MAX_ZOOM ? MAX_ZOOM : newScale;
			}
			private function unZommComponent():void{
				panzoom.fixedZoomPoint=fixedZoomPoint;
				var newScale:Number=panzoom.scale-1.5;
				panzoom.scale=newScale<MIN_ZOOM ? MIN_ZOOM : newScale;
			}
			// The PanZoomComponent provides and event "zoom" for which you can set a callback
			// whenever a zoom in or out happens.  Here, we're detecting a zoom from the component
			// and setting the slider value accordingly
			protected function _onZoom():void
			{
				
			}
			
			// The PanZoomComponent provides an event "pan" for which you can set a callback
			// whenever a pan happens
			protected function _onPan():void
			{
				//trace("We're panning!!!");
			}
			
		]]>
	</fx:Script>
		<!--Container -->
		<s:HGroup width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
			<mx:VBox width="650" height="500" borderColor="#C0C0C0" borderStyle="solid"
					 horizontalAlign="center" verticalAlign="middle">
				<!--Tools Bar -->
				<mx:VBox width="100%" height="18%" backgroundColor="#F2F2F2" borderColor="#C0C0C0"
						 borderStyle="solid">
					<!-- First Part-->
					<mx:HBox width="100%" height="50%" horizontalAlign="right" horizontalGap="3"
							 paddingRight="10" verticalAlign="middle">
						<s:Image id="pain" mouseDown="selectComponent(event)" click="cleanTerminal(event)"
								 source="@Embed(source = '/images/pain.png')" toolTip="Suppression"/>
						<mx:VRule height="100%"/>
						<s:Image id="grid" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/grid.jpg')" toolTip="Grid"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/back_left.png')"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/back_reight.png')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/mouse.png')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/copie.png')"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/remove.png')"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/refrech.png')"/>
						<mx:VRule height="100%"/>
						<s:Image id="stop" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/stop.png')" toolTip="Stop"/>
						<s:Image id="line" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/ligne.png')" toolTip="Ligne"/>
						<s:Image id="parcking" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/parcking.png')" toolTip="Parcking"/>
						<s:Image id="point" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/point.png')" toolTip="Point"/>
						<s:Image id="trapezoidal" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/trapezoidal.png')" toolTip="Triangle"/>
						<s:Image id="rect" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/ractangle_mere.png')"
								 toolTip="Rectangle"/>
						<s:Image id="rectangle_vert" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/rectangle_vert.png')"
								 toolTip="Rectangle"/>
						<s:Image id="tringle_bizzar" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/triangle_bizzar.png')"
								 toolTip="Triangle"/>
						<mx:VRule height="100%"/>
						<s:Image id="rail" mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/rail.png')" toolTip="Rail"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/zenzibar.png')"/>
					</mx:HBox>
					<mx:HRule width="100%"/>
					<!-- Second Part-->
					<mx:HBox width="100%" height="50%" horizontalAlign="right" horizontalGap="3"
							 paddingLeft="10" paddingRight="10" verticalAlign="middle">
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/zoomInOut.png')"/>
						<mx:VRule height="100%"/>
						<s:Label fontSize="12" fontWeight="bold" text="Accés direct :"/>
						<s:DropDownList width="20%" selectedIndex="0"> 
							<mx:ArrayCollection>
								<fx:String>Zone</fx:String>
								<fx:String>Navires</fx:String>
								<fx:String>Camions</fx:String>
								<fx:String>Train</fx:String>
								<fx:String>Avion</fx:String>
							</mx:ArrayCollection>
						</s:DropDownList>
						<s:DropDownList width="20%" selectedIndex="0"> 
							<mx:ArrayCollection>
								<fx:String>Travée</fx:String>
								<fx:String>Navires</fx:String>
								<fx:String>Camions</fx:String>
								<fx:String>Train</fx:String>
								<fx:String>Avion</fx:String>
							</mx:ArrayCollection>
						</s:DropDownList>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/okButton.jpg')" toolTip="OK"/>
						<mx:VRule height="100%"/>
						<mx:HBox width="20%">
							
						</mx:HBox>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/hand.jpg')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/lock.jpg')"/>
						<mx:VRule height="100%"/>
						<s:Image mouseDown="selectComponent(event)"
								 source="@Embed(source = '/images/binoculars.jpg')"/>
						<mx:VRule height="100%"/>
						<s:Image click="unZommComponent()"
								 source="@Embed(source = '/images/zoom_left.png')"/>
						<s:Image click="zommComponent()"
								 source="@Embed(source = '/images/zoom_reghit.png')"/>
					</mx:HBox>
				</mx:VBox>
				<!--Terminal -->
					<panzoom:PanZoomComponent id="panzoom" width="100%" height="100%"
											  backgroundColor="0x807F7A" centerOnLoad="false"
											  childPreventsPan="false"
											  fixedZoomPoint="{null}" initialZoomLevel="1"
											  loadCenterPoint="{new Point(100, 100)}"
											  mouseWheelZoomingEnabled="true" pan="this._onPan()"
											  panScrollBarsVisible="true" scaleMax="{MAX_ZOOM}"
											  scaleMin="{MIN_ZOOM}" zoom="this._onZoom()"
											  zoomSpeed="2" zoomToCursor="true">
						<local:CustomPanZoomContent id="terminal" mouseDown="terminal_mouseDownHandler(event)"/>
					</panzoom:PanZoomComponent>
					
				<!-- stat bar -->
				<mx:HBox width="100%" height="10%" backgroundColor="#7F7F7F">
					<mx:HBox width="80%" height="100%" verticalAlign="middle">
						<s:Label color="#FFFFFF" fontSize="12" fontWeight="bold" paddingLeft="9"
								 text="{echelle}"/>
					</mx:HBox>
					<mx:HBox width="20%" height="100%" horizontalAlign="right" verticalAlign="middle">
						<s:Label color="#FFFFFF" fontSize="12" fontWeight="bold" paddingRight="9"
								 text="Coordonnées : (300,400)"/>
					</mx:HBox>
				</mx:HBox>
			</mx:VBox>
		</s:HGroup>

</s:WindowedApplication>
